sudo: false
language: rust

matrix:
  include:
    # Minimum supported Rust
    - rust: 1.17.0
      env: FEATURES=""
    - rust: 1.17.0
      env: FEATURES="extprim"

    # Minimum Rust that works with the `version_numbers` test
    # Specifically, at the time of commiting these changes `version-sync` 0.5.0 depends on `url`
    # 1.7.0 which depends on `unicode-normalization` 0.1.6 which uses rvalue static promotion from
    # Rust 1.21. Let's not run the `version_numbers` test under Rust 1.17!
    - rust: 1.21.0
      env: FEATURES="version-sync"

    - rust: stable
      env: FEATURES="i128,version-sync"
    - rust: stable
      env: FEATURES="extprim,i128,version-sync"

    - rust: beta
      env: FEATURES="i128,version-sync"
    - rust: beta
      env: FEATURES="extprim,i128,version-sync"

    - rust: nightly
      env: FEATURES="i128,test-nightly-regressions,version-sync"
    - rust: nightly
      env: FEATURES="extprim,i128,test-nightly-regressions,version-sync"

    # Run QuickCheck only on limited amount of configurations - we don't need more
    - rust: stable
      env: FEATURES="extprim,i128,quickcheck"
    - rust: nightly
      env: FEATURES="extprim,i128,quickcheck,test-nightly-regressions"

    # Host documentation on <https://hcpl.github.com/serde_mtproto>
    - rust: nightly
      env: DOC_UPLOAD  # Just a marker visible from Travis logs
      install:
        - cargo install cargo-update || echo "cargo-update already installed"
        - cargo install cargo-travis || echo "cargo-travis already installed"
        - cargo install-update cargo-travis
      script:
        - cargo doc --features extprim,i128,quickcheck
      after_success:
        - cargo doc-upload

cache: cargo

env:
  global:
    - RUST_BACKTRACE=1

install:
  - |
    if [ "${TRAVIS_RUST_VERSION}" = nightly ]; then
        # Use <https://crates.io/crates/cargo-update> to ensure that we
        # don't waste cloud resources if clippy doesn't need an update
        if which cargo-install-update; then
            # Use cargo-update itself to further reduce build time
            cargo install-update cargo-update
        else
            # Probably doesn't exist yet, install it with usual means
            cargo install cargo-update
        fi

        # Did nightly get updated already?
        # Uses ./target/ because it is cached between runs
        if ["$(rustc --version)" = "$(cat ./target/rustc_version_for_clippy)"]; then
            # Perfect case, only install if clippy updates
            cargo install-update --allow-no-update clippy
        else
            # Yep, nightly got updated, throw the old binary out
            # (versions of rustc used to compile clippy and rustc dynamically-linked runtime
            # libraries must match exactly)
            cargo install --force clippy
            rustc --version > ./target/rustc_version_for_clippy
        fi
    fi

script:
  - |
    cargo build --verbose --all --lib --features "${FEATURES}" &&
    cargo test --verbose --all --lib --features "${FEATURES}"
  - |
    # Prefer finer-grained commands
    # Note: --tests flag only appeared in Rust 1.18:
    #   * https://blog.rust-lang.org/2017/06/08/Rust-1.18.html
    #   * https://github.com/rust-lang/cargo/pull/3901
    if [ "${TRAVIS_RUST_VERSION}" = 1.17.0 ]; then
        cargo test --verbose --all --features "${FEATURES}"
    else
        cargo build --verbose --all --tests --features "${FEATURES}" &&
        cargo test --verbose --all --tests --features "${FEATURES}"
    fi
  - |
    if [ "${TRAVIS_RUST_VERSION}" = nightly ]; then
        cargo build --verbose --all --benches --features "${FEATURES}" &&
        cargo test --verbose --all --benches --features "${FEATURES}" &&

        cargo clippy --verbose --all --features "${FEATURES}"
    fi

after_success:
  - |
    # Run benchmarks against master and PR branch
    # Adapted from <https://beachape.com/blog/2016/11/02/rust-performance-testing-on-travis-ci/>
    if [ "${TRAVIS_PULL_REQUEST}" = true ] && [ "${TRAVIS_RUST_VERSION}" = nightly ]; then
        cd "${TRAVIS_BUILD_DIR}"/.. &&
        git clone "${REMOTE_URL}" "${TRAVIS_REPO_SLUG}-bench" &&
        cd "${TRAVIS_REPO_SLUG}-bench" &&
        # Bench master
        git checkout master &&
        cargo bench > before &&
        # Bench PR'ing branch
        git checkout "${TRAVIS_COMMIT}" &&
        cargo bench > after &&
        # Compare results
        cargo install --force cargo-benchcmp &&
        cargo benchcmp --include-missing before after
    fi
