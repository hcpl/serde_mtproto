language: rust

cache: cargo

env:
  global:
    - RUST_BACKTRACE=1

matrix:
  include:
    - rust: 1.30.1
      env: DESCRIPTION="minimum supported Rust"
      script:
        - cargo test --verbose --all --lib
        - cargo test --verbose --all --tests

        - cargo test --verbose --all --lib --features "quickcheck"
        - cargo test --verbose --all --tests --features "quickcheck"

    - rust: stable
      env: DESCRIPTION="stable Rust, clippy"
      install:
        - rustup component add clippy-preview || echo "Could not install clippy"
      script:
        - cargo test --verbose --all --lib
        - cargo test --verbose --all --tests
        - which cargo-clippy && cargo clippy --verbose --all

        - cargo test --verbose --all --lib --features "quickcheck"
        - cargo test --verbose --all --tests --features "quickcheck"
        - which cargo-clippy && cargo clippy --verbose --all --features "quickcheck"

    - rust: beta
      env: DESCRIPTION="beta Rust, clippy"
      install:
        - rustup component add clippy-preview || echo "Could not install clippy"
      script:
        - cargo test --verbose --all --lib
        - cargo test --verbose --all --tests
        - which cargo-clippy && cargo clippy --verbose --all

        - cargo test --verbose --all --lib --features "quickcheck"
        - cargo test --verbose --all --tests --features "quickcheck"
        - which cargo-clippy && cargo clippy --verbose --all --features "quickcheck"

    - rust: nightly
      env: DESCRIPTION="nightly Rust, clippy"
      install:
        # `which cargo-clippy` always succeeds, resort to setting a boolean
        - rustup component add clippy-preview && HAS_CLIPPY=true || { HAS_CLIPPY=false; echo "Could not install clippy"; }
      script:
        - cargo test --verbose --all --lib --features "nightly test-nightly-regressions"
        - cargo test --verbose --all --tests --features "nightly test-nightly-regressions"
        - "${HAS_CLIPPY}" && cargo clippy --verbose --all --features "nightly test-nightly-regressions"

        - cargo test --verbose --all --lib --features "nightly quickcheck test-nightly-regressions"
        - cargo test --verbose --all --tests --features "nightly quickcheck test-nightly-regressions"
        - "${HAS_CLIPPY}" && cargo clippy --verbose --all --features "nightly quickcheck test-nightly-regressions"

        - cargo test --verbose --manifest-path bench-suite/Cargo.toml --all --benches

        - cargo update -Z minimal-versions
        - cargo build --verbose --manifest-path serde_mtproto_derive/Cargo.toml --lib
        - which cargo-clippy && cargo clippy --verbose --manifest-path serde_mtproto_derive/Cargo.toml

    # Host documentation on <https://hcpl.github.com/serde_mtproto>
    - rust: nightly
      env: DESCRIPTION="build and upload docs"
      install:
        - cargo install cargo-update || echo "cargo-update already installed"
        - cargo install cargo-travis || echo "cargo-travis already installed"
        - cargo install-update cargo-travis
      script:
        - cargo doc --manifest-path Cargo.toml --features "quickcheck"
        - cargo doc --manifest-path serde_mtproto_derive/Cargo.toml
        - git clone --depth=1 --branch gh-pages "https://github.com/${TRAVIS_REPO_SLUG}" target/gh-pages
        - |
          if [ -e "target/gh-pages/${TRAVIS_BRANCH}/index.html" ]; then
              rm -f target/doc/index.html
          else
              echo '<!DOCTYPE html>' > target/doc/index.html
              echo '<meta http-equiv="refresh" content="0; url=serde_mtproto/">' >> target/doc/index.html
              echo '<a href="serde_mtproto/">Redirect</a>' >> target/doc/index.html
          fi
        - rm -rf target/gh-pages
      after_success:
        - cargo doc-upload --message $'Automatic Travis documentation build\n\n'"${TRAVIS_COMMIT_MESSAGE}"

after_success:
  - |
    # Run benchmarks against master and PR branch
    # Adapted from <https://beachape.com/blog/2016/11/02/rust-performance-testing-on-travis-ci/>
    if [ "${TRAVIS_PULL_REQUEST}" = true ] && [ "${TRAVIS_RUST_VERSION}" = nightly ]; then
        cd "${TRAVIS_BUILD_DIR}"/.. &&
        git clone "${REMOTE_URL}" "${TRAVIS_REPO_SLUG}-bench" &&
        cd "${TRAVIS_REPO_SLUG}-bench" &&
        # Bench master
        git checkout master &&
        cargo bench > before &&
        # Bench PR'ing branch
        git checkout "${TRAVIS_COMMIT}" &&
        cargo bench > after &&
        # Compare results
        cargo install --force cargo-benchcmp &&
        cargo benchcmp --include-missing before after
    fi
